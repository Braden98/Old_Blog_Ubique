<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ubik Blog</title>
    <description>关于技术与生活，探索与分享 | 丁彪，Programmer,Software Engineer,amateur writer | 这里是 @Ubik丁彪 的个人博客，与你一起发现更大的世界。</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sun, 26 May 2019 22:35:44 +0800</pubDate>
    <lastBuildDate>Sun, 26 May 2019 22:35:44 +0800</lastBuildDate>
    <generator>Jekyll v3.8.5</generator>
    
      <item>
        <title>代码整洁之道</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;享受职业素养。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;专业主义&quot;&gt;专业主义&lt;/h1&gt;
&lt;h2 id=&quot;不行损害之事&quot;&gt;不行损害之事&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;让 QA 找不出任何问题&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;确信代码能正常运行（通过主动反复测试）&lt;/li&gt;
  &lt;li&gt;自动化 QA&lt;/li&gt;
  &lt;li&gt;不要破坏结构，以牺牲结构为代价发布新功能，得不偿失，将来必定后悔。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;##了解所在领域&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;NS图表&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Mealy &amp;amp; Moore 状态机的差别&lt;/li&gt;
  &lt;li&gt;变换分析的含义&lt;/li&gt;
  &lt;li&gt;快速排序手写&lt;/li&gt;
  &lt;li&gt;临时传递数据&lt;/li&gt;
  &lt;li&gt;耦合性（Conascence）&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;每个开发人员必须精通的事项&quot;&gt;每个开发人员必须精通的事项&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;设计模式 （GOF，24）&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;设计原则（SOLID）&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;编程方法
    &lt;ul&gt;
      &lt;li&gt;XP&lt;/li&gt;
      &lt;li&gt;Scrum&lt;/li&gt;
      &lt;li&gt;精益&lt;/li&gt;
      &lt;li&gt;看板&lt;/li&gt;
      &lt;li&gt;瀑布&lt;/li&gt;
      &lt;li&gt;结构化分析、设计&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;实践
    &lt;ul&gt;
      &lt;li&gt;测试驱动开发&lt;/li&gt;
      &lt;li&gt;面向对象设计&lt;/li&gt;
      &lt;li&gt;结构化编程&lt;/li&gt;
      &lt;li&gt;持续集成&lt;/li&gt;
      &lt;li&gt;结对编程&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;工件
    &lt;ul&gt;
      &lt;li&gt;UML 图&lt;/li&gt;
      &lt;li&gt;DFD 图&lt;/li&gt;
      &lt;li&gt;结构图&lt;/li&gt;
      &lt;li&gt;Petri 网络图&lt;/li&gt;
      &lt;li&gt;状态迁移图标&lt;/li&gt;
      &lt;li&gt;流程图&lt;/li&gt;
      &lt;li&gt;决策表&lt;/li&gt;
      &lt;li&gt;甘特图
        &lt;h2 id=&quot;职业道德&quot;&gt;职业道德&lt;/h2&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;坚持学习&lt;/li&gt;
  &lt;li&gt;练习&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;合作&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;辅导&lt;/li&gt;
  &lt;li&gt;了解业务领域&lt;/li&gt;
  &lt;li&gt;与客户（需求）保持一致&lt;/li&gt;
  &lt;li&gt;谦逊&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;说不&quot;&gt;说“不”&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;当你面对类似猩猩卖场提出的在黑色星期五之前做出一个 iPhone 应用的需求时，你应该尊重事实和自己，敢于说“不”。&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;说是&quot;&gt;说“是”&lt;/h1&gt;
&lt;h2 id=&quot;承诺用语&quot;&gt;承诺用语&lt;/h2&gt;
&lt;p&gt;做出承诺包含三个步骤&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;口头上说&lt;/strong&gt;自己将会去做&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;心里认真对待&lt;/strong&gt;做出的承诺&lt;/li&gt;
  &lt;li&gt;真正&lt;strong&gt;付诸行动&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;逃避用语&quot;&gt;逃避用语&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;需要/应该
    &lt;ul&gt;
      &lt;li&gt;我们需要把这事做完&lt;/li&gt;
      &lt;li&gt;但愿我有时间做这事&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;希望/但愿
    &lt;ul&gt;
      &lt;li&gt;希望我明天能完成任务&lt;/li&gt;
      &lt;li&gt;但愿电脑能快点&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;让我们（而不是让我）
    &lt;ul&gt;
      &lt;li&gt;让我们回头见&lt;/li&gt;
      &lt;li&gt;让我们把这事做完
总之，说“是”就是：你对自己将会做某事做了清晰的事实陈述，而且还说明了完成期限。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;编码&quot;&gt;编码&lt;/h1&gt;
&lt;h2 id=&quot;代码要求&quot;&gt;代码要求&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;代码能正常工作&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;代码能满足需求&lt;/li&gt;
  &lt;li&gt;代码能和现有系统结合得天衣无缝&lt;/li&gt;
  &lt;li&gt;其他程序员能读懂你的代码&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;个人状态&quot;&gt;个人状态&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;凌晨三点写的可能是糟糕的代码&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;焦虑时也是如此&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;流态区可能会效率高，但也会导致&lt;strong&gt;忽略与全局整合&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;音乐并不能提高效率&lt;/li&gt;
  &lt;li&gt;被打断的预防是结对编程或者 TDD&lt;/li&gt;
  &lt;li&gt;阻塞时找点别的事情干&lt;/li&gt;
  &lt;li&gt;“创造性输出”依赖于“创造性输入”，比如音乐、小说、电影等&lt;/li&gt;
  &lt;li&gt;调试也是编码的一部分&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;保持节奏&quot;&gt;保持节奏&lt;/h2&gt;
&lt;p&gt;软件开发是一场马拉松🏃🏻‍♂️而不是短跑。&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;知道何时应该离开一会，疲倦、预防颈椎病、心血管疾病（……)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;开车回家路上，脑袋可以解决一些问题&lt;/li&gt;
  &lt;li&gt;洗澡同上&lt;/li&gt;
  &lt;li&gt;进度延迟时坚决坚持你的估算&lt;/li&gt;
  &lt;li&gt;加班长期来说并无好处&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;帮助&quot;&gt;帮助&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;帮助他人可以收获更多&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;接受他人帮助&lt;/li&gt;
  &lt;li&gt;辅导缺乏经验的程序员是老鸟的职责&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;测试驱动开发&quot;&gt;测试驱动开发&lt;/h1&gt;
&lt;p&gt;最早是 XP 极限编程运动的一部分，后被其他所有敏捷方法采纳。不仅是一种缩短编码周期的简单技巧。&lt;/p&gt;
&lt;h2 id=&quot;三项法则是&quot;&gt;三项法则是&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;编写好失败单元测试之前，不写任何产品代码&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;只要有一个单元测试失败，就不再写测试代码；无法通过编译也是一种失败&lt;/li&gt;
  &lt;li&gt;产品代码恰好能够让当前的失败单元测试通过即可，不必多写&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;优势&quot;&gt;优势&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;确定性 修改之后运行测试，确保没有错误因修改产生&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;减少 Bug&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;让人敢于修改代码&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;单元测试成为示例和文档&lt;/li&gt;
  &lt;li&gt;遵循三项法则有助于做出松耦合的设计，因为测试不允许耦合&lt;/li&gt;
  &lt;li&gt;专业人士的选择&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;局限&quot;&gt;局限&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;某些情况下确实不适用，并非银弹，就像 DDD。&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;练习&quot;&gt;练习&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;用自己的时间练习————保证不落伍是自己的责任&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;-专业人士需要练习，做到最好，拓宽视野。&lt;/p&gt;

&lt;h1 id=&quot;验收测试&quot;&gt;验收测试&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;不要过早精细化————你不知道哪儿应该精细化&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;但确定需求应该尽早&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;业务分析员测试“正确路径”，QA测试“错误路径”&lt;/li&gt;
  &lt;li&gt;验收测试是业务方写给业务方的，单元测试是程序员写给自己的（也可以拿来做文档的一部分）&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;测试策略&quot;&gt;测试策略&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;QA 的任务就是和业务人员一起创建自动化验收测试。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;自动化测试金字塔，自顶向下依次是&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;人工探索式测试：需要人工介入，既不是自动化测试，也非脚本测试，目的是探索系统预期之外的能力&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;系统测试：对整个集成完毕的系统的自动化测试，不会直接测试业务规则，而是测试系统是否已经正确组装完毕、各部件之间是否能正常交互。&lt;/li&gt;
      &lt;li&gt;集成测试：组装配件成组合，判断其是否正常通信，是编排型测试，只看是否协调，不管业务规则&lt;/li&gt;
      &lt;li&gt;组件测试：对组建的业务规则的验收测试&lt;/li&gt;
      &lt;li&gt;单元测试：供程序员自己使用&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;时间管理&quot;&gt;时间管理&lt;/h1&gt;
&lt;p&gt;8小时很短暂，只有480分钟，28800秒。&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;会议需要成本，时间成本和金钱成本&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;会议并不总要参加，也可以离席&lt;/li&gt;
  &lt;li&gt;敏捷开发会议需要回答三个问题，每个问题不超过 20s
    &lt;ul&gt;
      &lt;li&gt;我昨天干了什么&lt;/li&gt;
      &lt;li&gt;我今天打算干什么&lt;/li&gt;
      &lt;li&gt;我遇到了什么问题&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;注意力
    &lt;ul&gt;
      &lt;li&gt;足够的睡眠&lt;/li&gt;
      &lt;li&gt;不集中注意力时，注意力可以恢复&lt;/li&gt;
      &lt;li&gt;肌肉注意力不同于心智注意力，且前者可以改善后者&lt;/li&gt;
      &lt;li&gt;平衡输入与输出&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;要避免的行为
    &lt;ul&gt;
      &lt;li&gt;优先级错乱&lt;/li&gt;
      &lt;li&gt;死胡同（走不下去，应该折返）&lt;/li&gt;
      &lt;li&gt;泥潭（可以完成但效率严重降低，应及时抽身）&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;预估&quot;&gt;预估&lt;/h1&gt;
&lt;p&gt;不同的人对预估看法不同。业务方觉得预估就是承诺，开发方认为认为预估只是个猜测。&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;避免暗示性承诺，分清楚预估与承诺&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;计划评审技术（PERT）
    &lt;ul&gt;
      &lt;li&gt;乐观预估 O&lt;/li&gt;
      &lt;li&gt;标称预估 N&lt;/li&gt;
      &lt;li&gt;悲观预估 P&lt;/li&gt;
      &lt;li&gt;期望时间 u = (O+4N+P)/6&lt;/li&gt;
      &lt;li&gt;标准差 o = (P-O)/6&lt;/li&gt;
      &lt;li&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;生成共识的 Delphi 法
    &lt;ul&gt;
      &lt;li&gt;亮手指&lt;/li&gt;
      &lt;li&gt;规划扑克&lt;/li&gt;
      &lt;li&gt;关联预估&lt;/li&gt;
      &lt;li&gt;三元预估&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;大数定律防止预估出错&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;压力&quot;&gt;压力&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;避免压力
    &lt;ul&gt;
      &lt;li&gt;合理的承诺&lt;/li&gt;
      &lt;li&gt;保持整洁&lt;/li&gt;
      &lt;li&gt;危机中的纪律&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;应对压力
    &lt;ul&gt;
      &lt;li&gt;不要惊慌失措&lt;/li&gt;
      &lt;li&gt;沟通&lt;/li&gt;
      &lt;li&gt;依靠纪律原则&lt;/li&gt;
      &lt;li&gt;寻求帮助&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;协作&quot;&gt;协作&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;p&gt;我们并非是因为喜欢和其他人在一起工作而选择做程序员的&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;与用户讨论，理解业务&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;与程序员密切合作&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;共享代码&lt;/li&gt;
      &lt;li&gt;结对编程&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;项目与团队&quot;&gt;项目与团队&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;p&gt;项目比团队更难构建&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;让一个程序员同时投身两个项目并不明智&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;有凝聚力的团队可以有3-20人，最好是12人。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;辅导学徒期与技艺&quot;&gt;辅导、学徒期与技艺&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;p&gt;医学专业已经建立了一套严密的辅导体系。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;上升过程
    &lt;ul&gt;
      &lt;li&gt;学徒期/实习生&lt;/li&gt;
      &lt;li&gt;熟练工&lt;/li&gt;
      &lt;li&gt;大师
学校能够传授的是理论，无法传授作为一个程序员所需掌握的原则、实践和技能。这些东西只有经由师徒个体间多年的细心监督和辅导才能获得。每个程序员都会经历上述时期，因此应该建立一种包含学徒期、实习期和长期指引的机制。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 02 May 2019 20:00:00 +0800</pubDate>
        <link>http://localhost:4000/2019/05/02/%E4%BB%A3%E7%A0%81%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93-%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%81%8C%E4%B8%9A%E4%BF%AE%E5%85%BB/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/05/02/%E4%BB%A3%E7%A0%81%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93-%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%81%8C%E4%B8%9A%E4%BF%AE%E5%85%BB/</guid>
        
        <category>Summary</category>
        
        <category>Clean Code</category>
        
        
      </item>
    
      <item>
        <title>基于SpringBoot的MyBlog项目总结</title>
        <description>&lt;h2 id=&quot;概述&quot;&gt;概述&lt;/h2&gt;
&lt;h4 id=&quot;时间&quot;&gt;时间&lt;/h4&gt;
&lt;p&gt;两周左右&lt;/p&gt;
&lt;h4 id=&quot;思路&quot;&gt;思路&lt;/h4&gt;
&lt;p&gt;整体使用Springboot进行后台快速开发，通过纯注解的方式使用SpringMVC来完成URL跳转和模型视图控制器的解耦，避免了配置文件的繁琐。同时利用Spring的AOP完成log功能，DI完成Service层中DAO层的注入，也没有使用配置文件。
对于ORM，选择Mybatis，通过xml配置文件的方式完成（为了以后扩展，注解方式不太好写复杂的sql语句）
整体使用REST，通过名词的URL+http动作来给后台传输数据，后台根据controller层的requestmapping注解选择合适的方法处理，在方法中调用Service层的服务得到ViewObject，通过setattributes传给视图层，并处理一些特殊情况和错误。&lt;/p&gt;
&lt;h4 id=&quot;技术栈&quot;&gt;技术栈&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;Springboot快速开发&lt;/li&gt;
  &lt;li&gt;Mybatis ORM框架减少DB代码&lt;/li&gt;
  &lt;li&gt;前端CSS网上找的&lt;/li&gt;
  &lt;li&gt;调试、部署&lt;/li&gt;
  &lt;li&gt;大头：maven bug解决（最终发现是setting.xml设置问题，当初为了用aliyun的mirrors加快速度，从网上找的配置文件，结果出了问题。）&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;思考&quot;&gt;思考&lt;/h2&gt;
&lt;p&gt;这个项目花的最多的时间不是写后端代码，而是调试mvn，package老是不成功，通过各种命令分析，包括但不限于tree分析依赖关系，更换mvn仓库，mirror源。在mvn打包Springboot不成功之后尝试按照之前的web项目打war包，或者用docker配置。
最终在用docker配置时的错误信息使我发现是setting.xml的本地仓库配置有问题，这也解释了为什么我的IDEA的默认maven配置文件和仓库不匹配（之前不匹配我都以为是我修改了IDEA的默认自带的maven仓库导致的）。
问题的关键在于我的IDEA的pom配置文件和终端的mvn命令默认的配置文件不一致：这是IDEA的锅。
&lt;img src=&quot;/img/2019-05-01-myblog1.jpg&quot; alt=&quot;配置方式&quot; title=&quot;配置方式&quot; /&gt;&lt;/p&gt;
&lt;center&gt;配置方式&lt;/center&gt;
&lt;p&gt;settings文件一开始不是这个，这就导致了所有的问题。&lt;/p&gt;

&lt;p&gt;这段经历使我收获了很多，面对bug，最重要的是要仔细读报错信息，如本次在用docker配置之前的&lt;code class=&quot;highlighter-rouge&quot;&gt;mvn clean package&lt;/code&gt;报错“包找不到”，我去IDE看，明明包都在那里，pox.xml也没报错，lib里边也确实有文件。&lt;/p&gt;

&lt;p&gt;最终解决是&lt;code class=&quot;highlighter-rouge&quot;&gt;vim ~/.m2/setting.xml&lt;/code&gt;改对应repo即可。&lt;/p&gt;

&lt;p&gt;其实之前出过几次这样的事，印象最深的是zsh的配置、mysql配置文件以及Spring boot启动事件。得出的经验教训都一样：仔细读报错信息，&lt;strong&gt;分析错误原因（画重点&lt;/strong&gt;）上&lt;a href=&quot;www.google.com&quot;&gt;google&lt;/a&gt; &lt;a href=&quot;https://stackoverflow.com&quot;&gt;stackoverflow&lt;/a&gt;查找错误信息。&lt;/p&gt;

&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;
&lt;p&gt;从这件事上看，时间大概三成写代码，七成调bug。
显然效率很低，正确的做法一是加快bug解决速度，二是少写工程性强、“八股文”、无用的代码（比如配置文件，服务器配置，静态资源管理）等，而是多学习，加快知识吸收速度，等实际用到再操作。反正以后工作几十年，工作之后的问题可以找到大牛，现在自己google万一找不出实在影响心情。&lt;/p&gt;
</description>
        <pubDate>Mon, 29 Apr 2019 20:00:00 +0800</pubDate>
        <link>http://localhost:4000/2019/04/29/Myblog-Springboot-Summary/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/04/29/Myblog-Springboot-Summary/</guid>
        
        <category>Summary</category>
        
        <category>Project</category>
        
        
      </item>
    
  </channel>
</rss>
